class Node:
    def __init__(self, data=None):
        self.data = data  # Armazena o valor do nó
        self.next = None  # Referência para o próximo nó (inicialmente é None)

class LinkedList:
    def __init__(self):
        self.head = None  # A lista começa vazia, então a cabeça (head) é None
    
    def is_empty(self):
        return self.head is None  # Retorna True se a lista estiver vazia
    
    def insert_at_end(self, data):
        new_node = Node(data)  # Cria um novo nó com o valor fornecido
        if self.is_empty():  # Se a lista estiver vazia, o novo nó será o head
            self.head = new_node
        else:
            current = self.head
            while current.next:  # Percorre até o último nó
                current = current.next
            current.next = new_node  # O último nó aponta para o novo nó
    
    def remove_from_end(self):
        if self.is_empty():  # Se a lista estiver vazia, não há nada para remover
            print("A lista está vazia. Não é possível remover o último elemento.")
            return
        
        # Se a lista tem apenas um elemento, basta remover o head
        if self.head.next is None:
            self.head = None
            return
        
        # Caso geral: percorre até o penúltimo nó
        current = self.head
        while current.next and current.next.next:
            current = current.next
        
        # Agora current é o penúltimo nó, e podemos remover o último
        current.next = None
    
    def print_list(self):
        current = self.head
        while current:
            print(current.data, end=" -> ")
            current = current.next
        print("None")  # Fim da lista

# Testando a remoção do último elemento
lista = LinkedList()
lista.insert_at_end(10)  # Inserir 10 no final
lista.insert_at_end(20)  # Inserir 20 no final
lista.insert_at_end(30)  # Inserir 30 no final
print("Lista antes da remoção:")
lista.print_list()  # Esperado: 10 -> 20 -> 30 -> None

lista.remove_from_end()  # Remover o último elemento (30)
print("Lista após a remoção do último elemento:")
lista.print_list()  # Esperado: 10 -> 20 -> None
