class Node:
    def __init__(self, data=None):
        self.data = data  # Armazena o valor do nó
        self.next = None  # Referência para o próximo nó (inicialmente é None)
        self.prev = None  # Referência para o nó anterior (inicialmente é None)

class DoublyLinkedList:
    def __init__(self):
        self.head = None  # A lista começa vazia, então a cabeça (head) é None
        self.tail = None  # O final (tail) também começa como None
    
    def is_empty(self):
        return self.head is None  # A lista está vazia se o head for None
    
    def print_list_forward(self):
        if self.is_empty():
            print("A lista está vazia.")
            return
        
        current = self.head
        while current:  # Percorre da cabeça para a cauda
            print(current.data, end=" <-> ")  # Imprime o valor do nó
            current = current.next
        print("None")  # Fim da lista
    
    def print_list_backward(self):
        if self.is_empty():
            print("A lista está vazia.")
            return
        
        current = self.tail
        while current:  # Percorre da cauda para a cabeça
            print(current.data, end=" <-> ")  # Imprime o valor do nó
            current = current.prev
        print("None")  # Fim da lista

# Testando a criação de uma lista duplamente encadeada
dll = DoublyLinkedList()

# Verificando se a lista está vazia
if dll.is_empty():
    print("A lista está vazia.")
else:
    print("A lista não está vazia.")

# Imprimindo a lista (vazia)
dll.print_list_forward()  # Esperado: A lista está vazia.
dll.print_list_backward()  # Esperado: A lista está vazia.
